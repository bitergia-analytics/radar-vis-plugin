name: release

on:
  push:
    tags:
      - '*.*.*'
      - '*.*.*-*'

jobs:
  build:
    name: Build plugin
    runs-on: ubuntu-latest
    outputs:
      filename: ${{ steps.build_zip.outputs.filename }}
    steps:
      - name: Checkout plugin source code
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # 3.1.0
        with:
          path: plugin
      - name: Get plugin metadata
        id: plugin_metadata
        run: |
          echo "::set-output name=name::$(node -p "(require('./plugin/package.json').name)")"
          echo "::set-output name=version::$(node -p "(require('./plugin/package.json').version).match(/[.0-9]+/)[0]")"
      - name: Get OpenSearch Dashboards version
        id: osd_version
        run: |
          echo "::set-output name=version::$(node -p "(require('./plugin/opensearch_dashboards.json').opensearchDashboardsVersion).match(/[.0-9]+/)[0]")"
      - name: Checkout OpenSearch Dashboards
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # 3.1.0
        with:
          repository: opensearch-project/OpenSearch-Dashboards
          ref: ${{ steps.osd_version.outputs.version }}
          path: osd
      - name: Setup node
        uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8 # 4.0.1
        with:
          node-version-file: './osd/.nvmrc'
          registry-url: 'https://registry.npmjs.org'
      - name: Setup yarn
        run: |
          npm uninstall -g yarn
          YARN_VERSION=$(node -p "require('./osd/package.json').engines.yarn")
          echo "Installing yarn @$YARN_VERSION"
          npm i -g yarn@$YARN_VERSION
      - name: Move plugin to OpenSearch Dashboards folder
        run: |
          mkdir -p osd/plugins
          mv plugin osd/plugins
      - name: Bootstrap plugin/opensearch-dashboards
        run: |
          cd osd/plugins/plugin
          yarn osd bootstrap
      - name: Build plugin
        id: build_zip
        run: |
          cd osd/plugins/plugin
          yarn build
          tmp_zip_path=`ls $(pwd)/build/*.zip`
          filename=${{ steps.plugin_metadata.outputs.name }}-${{ steps.plugin_metadata.outputs.version }}_${{ steps.osd_version.outputs.version }}.zip
          zip_path=$(pwd)/build/$filename
          mv $tmp_zip_path $zip_path
          echo "::set-output name=zip_path::$zip_path"
          echo "::set-output name=filename::$filename"
      - name: Upload plugin artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # 3.1.2
        with:
          name: plugin_artifact
          path: ${{ steps.build_zip.outputs.zip_path }}

  release:
    name: Release plugin
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Get release tag
        id: tag
        run: |
          echo ::set-output name=tag::${GITHUB_REF#refs/tags/}
        shell: bash
      - name: Checkout plugin source code
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # 3.1.0
        with:
          path: plugin
      - name: Download plugin artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # 3.0.2
        with:
          name: plugin_artifact
          path: plugin/build
      - name: Create release
        run: |
          cd plugin
          gh release create ${{ steps.tag.outputs.tag }} build/${{ needs.build.outputs.filename }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
